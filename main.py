import pandas as pd
import pymongo
import logging
# Creating custom logger
logger = logging.getLogger(__name__)
# setting logging level = INFO
logger.setLevel(10)
# Formating and adding handler
formatter = logging.Formatter("%(levelname)s %(asctime)s  %(message)s")
file_handler = logging.FileHandler("logfile.log")
file_handler.setFormatter(formatter)
logger.addHandler(file_handler)


class mongo:
    def __init__(self, url, id, database, collection):
        """   url is mongodb connection url.\nid is RANDOM or ORDERED.
    RANDOM means no object id will be assigned to Documents,id will be generated by mongodb.\n
    ORDERED means id will be equal to (row number of csv file-1).
    Database is mongodb database name,collection is mongodb collection name."""
        logger.info("Program started")
        self.url = url
        self.id = id
        self.database = database
        self.collection = collection
        if self.id == "RANDOM" or self.id == "ORDERED":
            logger.info(
                f"url:{self.url} id:{self.id} database:{self.database} Collection:{self.collection}")
        else:
            logger.error(
                f"url:{self.url} id:{self.id} database:{self.database} Collection:{self.collection}")
            raise ValueError("value of id must be 'RANDOM' or 'ORDERED'")

    def csvtolist(self, csv_location):
        """It will convert a csv file into a list of dictionary"""
        # Reading CSV
        try:
            data = pd.read_csv(csv_location, sep=";")
        except Exception as e:
            logger.error(e)
        l = []
        # Converting pandas frame into a list
        try:
            for i in range(len(data)):
                temp_dict = dict(data.iloc[i])
                if self.id == "ORDERED":
                    temp_dict["_id"] = i
                for item in temp_dict:
                    if item != "_id":
                        temp = str(temp_dict[item])
                        temp_dict[item] = int(temp.replace(",", ""))
                l.append(temp_dict)
        except Exception as e:
            logger.error(e)
        return l

    def list_to_db(self, location):
        """It will write the given list to mongodb server"""
        try:
            # Establishing connection
            client = pymongo.MongoClient(self.url)
            db = client[self.database]
            mycol = db[self.collection]
            # Inserting in Mongodb
            mycol.insert_many(mongo.csvtolist(self, csv_location=location))
            logger.info(
                f"Data inserted Successfully!! Database name:{self.database} Collection name:{self.collection} Csv_location: {location}")
        except Exception as e:
            logger.error(e)
        finally:
            client.close()

    def insert(self, value):
        """It will insert a single value to Mongodb"""
        try:
            # Establishing connection
            client = pymongo.MongoClient(self.url)
            db = client[self.database]
            mycol = db[self.collection]
            # Inserting in Mongodb
            mycol.insert_one(value)
            logger.info(
                f"Database name:{self.database},Collection name:{self.collection},Inserted Value:{value}")
        except Exception as e:
            logger.error(e)
        finally:
            client.close()

    def bulk_insert(self, value):
        """It will bulk insert into mongodb"""
        try:
            # Establishing connection
            client = pymongo.MongoClient(self.url)
            db = client[self.database]
            mycol = db[self.collection]
            # Inserting in Mongodb ,value is form of list of dictionary
            mycol.insert_many(value)
            logger.info(
                f"Database name:{self.database},Collection name:{self.collection},Inserted Value:{value}")
        except Exception as e:
            logger.error(e)
        finally:
            client.close()

    def deleteall(self):
        """It will Delete all the values of given collection"""
        try:
            # Establishing connection
            client = pymongo.MongoClient(self.url)
            db = client[self.database]
            mycol = db[self.collection]
            # Inserting in Mongodb ,value is form of list of dictionary
            mycol.delete_many({})
            logger.warning(
                f"All Deleted! Database name:{self.database},Collection name:{self.collection}")
        except Exception as e:
            logger.error(e)
        finally:
            client.close()

    def delete(self, value, many=False):
        """Delete one value or many value from Mongodb,Use many=True to delete multiple value"""
        try:
            # Establishing connection
            client = pymongo.MongoClient(self.url)
            db = client[self.database]
            mycol = db[self.collection]
            # Inserting in Mongodb ,value is form of dictionary
            if many == False:
                mycol.delete_one(value)
            elif many == True:
                mycol.delete_many(value)
            logger.warning(
                f"Something Deleted! Database name:{self.database},Collection name:{self.collection} Deleted Value:{value}")
        except Exception as e:
            logger.error(e)
        finally:
            client.close()

    def find(self, value=None, all=False):
        """Find One or all value from Mongodb. Use all=True for finding Multiple values"""
        try:
            # Establishing connection
            client = pymongo.MongoClient(self.url)
            db = client[self.database]
            mycol = db[self.collection]
            # Inserting in Mongodb ,value is form of list of dictionary
            if all == False:
                print(mycol.find_one({}, value))
            elif all == True:
                for items in mycol.find():
                    print(items)
            logger.info(
                f"Find Operation! Database name:{self.database},Collection name:{self.collection},value:{value}")
        except Exception as e:
            logger.error(e)
        finally:
            client.close()

    def update(self, query, newvalues, many=False):
        """Update one or many values from Mongodb. Use many=True for deleting many values"""
        try:
            # Establishing connection
            client = pymongo.MongoClient(self.url)
            db = client[self.database]
            mycol = db[self.collection]
            # Inserting in Mongodb ,value is form of dictionary
            if many == False:
                mycol.update_one(query, newvalues)
            elif many == True:
                mycol.update_many(query, newvalues)
            logger.warning(
                f"Update Operation! Database name:{self.database},Collection name:{self.collection} Query:{query} Newvalues:{newvalues}")
        except Exception as e:
            logger.error(e)
        finally:
            client.close()
